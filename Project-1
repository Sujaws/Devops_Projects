here we will use GIT+Jenkins+Maven+Tomcat together and configure it as CI-CD flow:


Login to Jenkins console
Create Jenkins job, Fill the following details,

source code management::
Mention the repo URL and the master details in it.

IN BUILD: select Maven version  (invoke top level maven targets)
Root POM: pom.xml
Goals : clean install package



Adding Deployment Steps: 
in this case we are going to install 'deploy to container' plugin. this is need to deploy on tomcat server which we are using.

Install maven plugin without restart
Manage Jenkins > Jenkins Plugins > available > deploy to container

on tomcat server our Jenkins server need access. For this we should setup credentials. This option is available in Jenkins home page:

setup credentials
credentials > jenkins > Global credentials > add credentials
Username	: deployer
Password : XXXXXXX
id : Tomcat_user
Description: Tomcat user to deploy on tomcat server


Modify the same job which created:
Post Steps
Deploy war/ear to container
WAR/EAR files : **/*.war   --------- in workspace dir wherever it finds war file ext..it will take that
Containers : Tomcat 8.x
Credentials: Tomcat_user (which created in above step)
Tomcat URL : http://<PUBLIC_IP>:<PORT_NO>/webapp

Save and run the job now.




Continuous Integration & Continuous Deployment (CI/CD)
Now job is running fine but to make this as Continuous Integration and Continuous Deployment we have to ado below steps:

Build Triggers
Poll SCM
schedule */2 * * * *
Save the job and modify the code in GitHub.

Save the job and modify the code in GitHub. Then you could see your job get trigger a build without any manual intervention.
